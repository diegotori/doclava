import org.gradle.internal.jvm.Jvm

apply plugin: 'java'
apply plugin: 'maven-publish'


group = 'com.diegotori.doclava'
archivesBaseName = project.name
version = '1.0.6.1'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.warnings = false
}

repositories {
	jcenter()
}

dependencies {
	compile files(Jvm.current().toolsJar)
	compile 'com.google.guava:guava:18.0'
	compile 'com.google.jsilver:jsilver:1.0.0'
	compile 'org.antlr:antlr:3.4'

	compile 'org.slf4j:slf4j-api:1.7.21'
	compile 'ch.qos.logback:logback-classic:1.1.7'
	compile 'ch.qos.logback:logback-core:1.1.7'
}

javadoc {
	title = "Documentation for $project.name."
	group = JavaBasePlugin.DOCUMENTATION_GROUP
	description "Generates Javadoc for Java Project ${project.name}."
	//Set our code to document.
	source = project.sourceSets.main.allJava
	classpath = files(project.configurations.compile, compileJava.classpath);
	failOnError = false;
	options {
		bootClasspath Jvm.current().runtimeJar
	}
	options.encoding = "UTF-8"
}

task sourceJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourceJar
	archives javadocJar
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourceJar
			artifact javadocJar
		}
	}
}

model {
	tasks.generatePomFileForMavenJavaPublication {
		destination = file("$buildDir/poms/$project.name-${project.version}.pom")
	}
}

task fatJar(type: Jar, dependsOn: [':compileJava', ':processResources']){
	group = BasePlugin.BUILD_GROUP
	description = "Creates a statically linked $project.name fat JAR binary."
	from files(sourceSets.main.output)
	def nonJavadocRuntimeDeps = configurations.compile.asFileTree.files.findAll {
		it.name != 'tools.jar'
	}.collect {
		it.isDirectory() ? it : zipTree(it)
	}
	from nonJavadocRuntimeDeps

	manifest {
		attributes 'Main-Class': 'com.google.doclava.Doclava'
	}
	baseName = "${project.name}-fatjar"
	destinationDir = file("$buildDir/fat-jar")
}

task createStandaloneArtifacts(type: Copy,
		dependsOn: [":fatJar", ":generatePomFileForMavenJavaPublication"]){
	group = PublishingPlugin.PUBLISH_TASK_GROUP
	doFirst {
		from generatePomFileForMavenJavaPublication.destination
	}
	from project.configurations.archives.allArtifacts.files
	from fatJar.destinationDir
	into file("$buildDir/standalone-dist")
}
